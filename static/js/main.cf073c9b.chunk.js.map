{"version":3,"sources":["../MDB-React-Free-npm/src/Animation.js","../MDB-React-Free-npm/src/App.js","../MDB-React-Free-npm/src/registerServiceWorker.js","../MDB-React-Free-npm/src/index.js"],"names":["AnimationPage","react_default","a","createElement","mdbreact_esm","type","infinite","Form","state","count","handleAddTask","listElement","document","querySelector","task","appendChild","_this","setState","innerText","concat","handleRemoveTask","lastElementChild","remove","alert","handleClearTask","querySelectorAll","forEach","el","parentNode","removeChild","className","Animation","color","onClick","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","App","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sQAWeA,EARO,WAClB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcC,KAAK,SAASC,UAAQ,GAChCL,EAAAC,EAAAC,cAAA,0BC0DGI,6MA1DXC,MAAQ,CACJC,MAAO,KAGXC,cAAgB,WAEZ,IAAMC,EAAcC,SAASC,cAAc,iBACvCC,EAAOF,SAAST,cAAc,MAClCQ,EAAYI,YAAYD,GAExBE,EAAKC,SAAS,CACVR,MAAOO,EAAKR,MAAMC,MAAM,GACzB,WACCK,EAAKI,UAAL,eAAAC,OAAgCH,EAAKR,MAAMC,YAKnDW,iBAAmB,WACRJ,EAAKR,MAAMC,MAAQ,EACtBO,EAAKC,SAAS,CACVR,MAAOO,EAAKR,MAAMC,MAAM,GACzB,WACCG,SAASC,cAAc,iBAAiBQ,iBAAiBC,OAAO,QAErC,IAArBN,EAAKR,MAAMC,OACrBc,MAAM,8BAKdC,gBAAkB,WACdZ,SAASa,iBAAiB,MAAMC,QAAQ,SAACC,GACrCA,EAAGC,WAAWC,YAAYF,KAG9BX,EAAKC,SAAS,CACVR,MAAO,6EAMX,OACIR,EAAAC,EAAAC,cAAA,WAAS2B,UAAU,WAEjB7B,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,qBACb7B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQ4B,MAAM,SAASC,QAASC,KAAKxB,eAArC,OACAT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQ4B,MAAM,QAAQC,QAASC,KAAKd,kBAApC,UACAnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQ4B,MAAM,UAAUC,QAASC,KAAKV,iBAAtC,UAEFvB,EAAAC,EAAAC,cAAA,MAAI2B,UAAU,yBArDTK,aCKbC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1C,QACfoC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC5DjEC,IAASC,OAAQ1D,EAAAC,EAAAC,cAACyD,EAAD,MAAUhD,SAASiD,eAAe,SDUpC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,kBAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAxB,OAAM4C,kBAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,MCxBxBiC","file":"static/js/main.cf073c9b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBAnimation } from \"mdbreact\";\r\n\r\nconst AnimationPage = () => {\r\n    return (\r\n        <MDBAnimation type=\"bounce\" infinite>\r\n            <h1>To Do List</h1>\r\n        </MDBAnimation>\r\n    );\r\n};\r\n\r\nexport default AnimationPage;","import React, { Component } from 'react';\nimport { MDBBtn } from \"mdbreact\";\nimport AnimationPage from './Animation';\n\n\nclass Form extends Component {\n    state = {\n        count: 0,\n    };\n\n    handleAddTask = () => {\n\n        const listElement = document.querySelector('.element-list');\n        let task = document.createElement('li');\n        listElement.appendChild(task);\n\n        this.setState({\n            count: this.state.count+1,\n        }, () => {\n            task.innerText = `Task number ${this.state.count}`;\n        });\n    }\n\n\n    handleRemoveTask = () => {\n            if(this.state.count > 0) {\n            this.setState({\n                count: this.state.count-1,\n            }, () => {\n                document.querySelector('.element-list').lastElementChild.remove('li');\n            });\n            } else if(this.state.count === 0) {\n            alert('no more task to remove!');\n        }\n    }\n\n\n    handleClearTask = () => {\n        document.querySelectorAll('li').forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n\n        this.setState({\n            count: 0,\n        });\n    }\n\n\n    render() {\n        return (\n            <section className='wrapper'>\n              {/* <h1>To Do List</h1> */}\n              <AnimationPage/>\n              <div className='buttons-container'>\n                <MDBBtn color=\"unique\" onClick={this.handleAddTask}>Add</MDBBtn>\n                <MDBBtn color=\"amber\" onClick={this.handleRemoveTask}>Remove</MDBBtn>\n                <MDBBtn color=\"elegant\" onClick={this.handleClearTask}>Clean</MDBBtn>\n              </div>\n              <ul className='element-list'></ul>\n            </section>\n        )\n    }\n}\n\nexport default Form;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}