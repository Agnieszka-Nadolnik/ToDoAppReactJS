{"version":3,"sources":["components/Animation.js","components/Add.js","components/Task.js","components/ToDoList.js","App.js","registerServiceWorker.js","index.js"],"names":["AnimationPage","react_default","a","createElement","mdbreact_esm","type","Add","minDate","Date","toISOString","slice","state","text","date","_this","handleDateChange","e","setState","target","value","handleChange","handleClick","preventDefault","console","log","_this$state","length","props","add","alert","className","htmlFor","name","id","placeholder","this","onChange","min","style","width","color","margin","onClick","Component","Task","_props$task","task","active","finishDate","btnStyle","height","padding","fontSize","textStyle","change","delete","ToDoList","tasks","filter","done","activeTasks","map","components_Task","key","doneTasks","App","counter","handleDeleteTask","Object","toConsumableArray","index","findIndex","splice","handleChangeTaskStatus","Array","from","forEach","toLocaleDateString","addTask","prevState","concat","Animation","components_Add","components_ToDoList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6QAWeA,EARO,WAClB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcC,KAAK,UACfJ,EAAAC,EAAAC,cAAA,0BCiDGG,6MAlDXC,SAAU,IAAIC,MAAOC,cAAcC,MAAM,EAAE,MAC3CC,MAAQ,CACJC,KAAM,GACNC,KAAMC,EAAKP,WAGfQ,iBAAmB,SAACC,GAChBF,EAAKG,SAAS,CACVJ,KAAMG,EAAEE,OAAOC,WAIvBC,aAAe,SAACJ,GACZF,EAAKG,SAAS,CACVL,KAAMI,EAAEE,OAAOC,WAIvBE,YAAc,SAACL,GACXA,EAAEM,iBACFC,QAAQC,IAAI,SAFK,IAAAC,EAGIX,EAAKH,MAAnBC,EAHUa,EAGVb,KAAMC,EAHIY,EAGJZ,KACVD,EAAKc,OAAS,EACDZ,EAAKa,MAAMC,IAAIhB,EAAMC,IAEjCC,EAAKG,SAAS,CACVL,KAAM,GACNC,KAAMC,EAAKP,UAIfsB,MAAM,gGAKV,OACI5B,EAAAC,EAAAC,cAAA,WAAS2B,UAAU,YACf7B,EAAAC,EAAAC,cAAA,QAAM2B,UAAU,aACZ7B,EAAAC,EAAAC,cAAA,SAAO4B,QAAQ,SAAf,kBACA9B,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAO2B,KAAK,QAAQC,GAAG,QAAQC,YAAY,gBAAgBf,MAAOgB,KAAKxB,MAAMC,KAAMwB,SAAUD,KAAKf,eAC9GnB,EAAAC,EAAAC,cAAA,SAAO4B,QAAQ,SACf9B,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOc,MAAOgB,KAAKxB,MAAME,KAAMwB,IAAKF,KAAK5B,QAAS6B,SAAUD,KAAKpB,iBAAkBuB,MAAO,CAACC,MAAO,SAC9GtC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQoC,MAAM,SAASF,MAAO,CAACC,MAAO,MAAOE,OAAQ,UAAWpC,KAAK,SAASqC,QAASP,KAAKd,aAA5F,kBA7CFsB,aCgCHC,EAhCF,SAACjB,GAAU,IAAAkB,EAEyBlB,EAAMmB,KAA5ClC,EAFaiC,EAEbjC,KAAMC,EAFOgC,EAEPhC,KAAMoB,EAFCY,EAEDZ,GAAIc,EAFHF,EAEGE,OAAQC,EAFXH,EAEWG,WACzBC,EAAW,CACbV,MAAO,OAAQW,OAAQ,OAAQT,OAAO,gBAAiBU,QAAS,EAAGC,SAAU,QAE3EC,EAAY,CACdD,SAAU,OACVX,OAAQ,GAGZ,OAAGM,EAEC9C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGmC,MAAOe,GAAYzC,GACtBX,EAAAC,EAAAC,cAAA,KAAGmC,MAAOe,GAAV,0BAAwCxC,GACxCZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQkC,MAAOW,EAAUT,MAAM,SAASE,QAAS,kBAAMf,EAAM2B,OAAOrB,KAApE,gBACAhC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQkC,MAASW,EAAUT,MAAM,QAAQE,QAAS,kBAAMf,EAAM4B,OAAOtB,KAArE,cAKJhC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGmC,MAAOe,GAAYzC,GACtBX,EAAAC,EAAAC,cAAA,KAAGmC,MAAOe,GAAV,0BAAwCxC,GACxCZ,EAAAC,EAAAC,cAAA,KAAGmC,MAAOe,GAAV,0BAAwCL,GACxC/C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQkC,MAASW,EAAUT,MAAM,QAAQE,QAAS,kBAAMf,EAAM4B,OAAOtB,KAArE,eCJGuB,EArBE,SAAC7B,GACd,IAAMoB,EAASpB,EAAM8B,MAAMC,OAAO,SAAAZ,GAAI,OAAoB,IAAhBA,EAAKC,SACzCY,EAAOhC,EAAM8B,MAAMC,OAAO,SAAAZ,GAAI,OAAoB,IAAhBA,EAAKC,SAEvCa,EAAcb,EAAOc,IAAI,SAAAf,GAAI,OAAI7C,EAAAC,EAAAC,cAAC2D,EAAD,CAAMC,IAAKjB,EAAKb,GAAIa,KAAMA,EAAMS,OAAQ5B,EAAM4B,OAAQD,OAAQ3B,EAAM2B,WACrGU,EAAYL,EAAKE,IAAI,SAAAf,GAAI,OAAI7C,EAAAC,EAAAC,cAAC2D,EAAD,CAAMC,IAAKjB,EAAKb,GAAIa,KAAMA,EAAMS,OAAQ5B,EAAM4B,OAAQD,OAAQ3B,EAAM2B,WAEnG,OACIrD,EAAAC,EAAAC,cAAA,WAAS2B,UAAU,aACf7B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,aAAaG,GAAG,QAC3BhC,EAAAC,EAAAC,cAAA,8BACCyD,EAAYlC,OAAS,EAAIkC,EAAc3D,EAAAC,EAAAC,cAAA,6BAE5CF,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,kBACX7B,EAAAC,EAAAC,cAAA,qCACC6D,KCiDNC,6MA7DbC,QAAU,IACVvD,MAAQ,CACN8C,MAAO,MAIXU,iBAAmB,SAAClC,GACpBV,QAAQC,IAAI,gBAAaS,GACzB,IAAMwB,EAAKW,OAAAC,EAAA,EAAAD,CAAOtD,EAAKH,MAAM8C,OACvBa,EAAQb,EAAMc,UAAU,SAAAzB,GAAI,OAAIA,EAAKb,KAAOA,IAClDwB,EAAMe,OAAOF,EAAM,GAEnBxD,EAAKG,SAAS,CACZwC,aAIFgB,uBAAyB,SAACxC,GACxBV,QAAQC,IAAI,SAAWS,GACvB,IAAMwB,EAAQiB,MAAMC,KAAK7D,EAAKH,MAAM8C,OACpCA,EAAMmB,QAAQ,SAAA9B,GACTA,EAAKb,KAAOA,IACba,EAAKC,QAAS,EACdD,EAAKE,YAAa,IAAIxC,MAAOqE,wBAIjC/D,EAAKG,SAAS,CACZwC,aAIJqB,QAAU,SAAClE,EAAMC,GACf,IAAMiC,EAAO,CACXb,GAAInB,EAAKoD,QACTtD,KAAMA,EACNC,KAAMA,EACNkC,QAAQ,EACRC,WAAY,MAQd,OALAlC,EAAKoD,UAELpD,EAAKG,SAAS,SAAA8D,GAAS,MAAK,CAC1BtB,MAAK,GAAAuB,OAAAZ,OAAAC,EAAA,EAAAD,CAAMW,EAAUtB,OAAhB,CAAuBX,QAEvB,2EAGD,OACI7C,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,WACb7B,EAAAC,EAAAC,cAAC8E,EAAD,MACAhF,EAAAC,EAAAC,cAAA,WAAS2B,UAAU,kBACjB7B,EAAAC,EAAAC,cAAC+E,EAAD,CAAKtD,IAAKO,KAAK2C,UACf7E,EAAAC,EAAAC,cAACgF,EAAD,CAAU1B,MAAOtB,KAAKxB,MAAM8C,MAAOF,OAAUpB,KAAKgC,iBAAkBb,OAAQnB,KAAKsC,kCAxD/E9B,aCKZyC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvF,QACfiF,UAAUC,cAAcQ,WAK1B9E,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB8E,MAAM,SAAAC,GACLhF,QAAQgF,MAAM,4CAA6CA,KC5DjEC,IAASC,OAAQxG,EAAAC,EAAAC,cAACuG,EAAD,MAAUC,SAASC,eAAe,SDUpC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,kBAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAX,OAAM8B,kBAAN,sBAEN1B,EAwCX,SAAiCO,GAE/BsB,MAAMtB,GACHI,KAAK,SAAAmB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,KAAK,SAAAC,GACjCA,EAAawB,aAAazB,KAAK,WAC7BT,OAAOC,SAASkC,aAKpB/B,EAAgBC,KAGnBW,MAAM,WACL/E,QAAQC,IACN,mEAzDAkG,CAAwB/B,GAHxBD,EAAgBC,MCxBxBgC","file":"static/js/main.bd734af7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBAnimation } from \"mdbreact\";\r\n\r\nconst AnimationPage = () => {\r\n    return (\r\n        <MDBAnimation type=\"bounce\">\r\n            <h1>To Do List</h1>\r\n        </MDBAnimation>\r\n    );\r\n};\r\n\r\nexport default AnimationPage;","import React, { Component } from 'react';\r\nimport { MDBBtn } from \"mdbreact\";\r\n\r\nclass Add extends Component {\r\n \r\n    minDate = new Date().toISOString().slice(0,10);\r\n    state = {\r\n        text: '',\r\n        date: this.minDate,  \r\n    }\r\n   \r\n    handleDateChange = (e) => {\r\n        this.setState({\r\n            date: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            text: e.target.value,\r\n        });    \r\n    }\r\n\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        console.log('click');\r\n        const {text, date} = this.state\r\n        if(text.length > 0) {\r\n            const add = this.props.add(text, date);\r\n        if(add) {\r\n            this.setState({\r\n                text: '',\r\n                date: this.minDate,\r\n            })\r\n        }\r\n        } else {\r\n            alert('Brak nazwy zadania!')\r\n        }\r\n        \r\n    }\r\n    render() {\r\n        return(\r\n            <section className=\"add_task\">\r\n                <form className=\"task_form\">\r\n                    <label htmlFor=\"title\"> Dodaj zadanie</label>\r\n                    <input type=\"text\" name=\"title\" id=\"title\" placeholder=\"Nazwa zadania\" value={this.state.text} onChange={this.handleChange}/>\r\n                    <label htmlFor=\"date\"></label>\r\n                    <input type=\"date\" value={this.state.date} min={this.minDate} onChange={this.handleDateChange} style={{width: '50%'}}/>\r\n                    <MDBBtn color=\"unique\" style={{width: '50%', margin: \"10px 0\"}} type='submit' onClick={this.handleClick}>Dodaj</MDBBtn>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Add;\r\n","import React from 'react';\r\nimport { MDBBtn } from \"mdbreact\";\r\n\r\nconst Task = (props) => {\r\n\r\n    const {text, date, id, active, finishDate} = props.task;\r\n    const btnStyle = {\r\n        width: '70px', height: '35px', margin:\"10px 10px 0 0\", padding: 0, fontSize: \"10px\" \r\n    }\r\n    const textStyle = {\r\n        fontSize: \"15px\",\r\n        margin: 0,\r\n    }\r\n\r\n    if(active) {\r\n    return(\r\n        <div>\r\n            <p style={textStyle}>{text}</p>\r\n            <p style={textStyle}>Data rozpoczęcia: {date}</p>\r\n            <MDBBtn style={btnStyle} color='unique' onClick={() => props.change(id)}>Zakończ</MDBBtn>\r\n            <MDBBtn style = {btnStyle} color='amber' onClick={() => props.delete(id)}>Usuń</MDBBtn>\r\n        </div>\r\n    );\r\n} else {\r\n    return(\r\n        <div>\r\n            <p style={textStyle}>{text}</p>\r\n            <p style={textStyle}>Data rozpoczęcia: {date}</p>\r\n            <p style={textStyle}>Data zakończenia: {finishDate}</p>\r\n            <MDBBtn style = {btnStyle} color='amber' onClick={() => props.delete(id)}>Usuń</MDBBtn>\r\n        </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\n\r\nconst ToDoList = (props) => {\r\n    const active = props.tasks.filter(task => task.active === true);\r\n    const done = props.tasks.filter(task => task.active === false);\r\n\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n\r\n        return(\r\n            <section className=\"all_lists\">\r\n                <div className=\"to_do_list\" id='test'>\r\n                    <h4>Lista zadań</h4>\r\n                    {activeTasks.length > 0 ? activeTasks : <p>Brak zadań</p>}\r\n                </div>\r\n                <div className=\"done_task_list\">\r\n                    <h5>Zadania zakończone</h5>\r\n                    {doneTasks}\r\n                </div>\r\n            </section>\r\n        )\r\n}\r\n\r\nexport default ToDoList","import React, { Component } from 'react';\nimport AnimationPage from './components/Animation';\nimport Add from './components/Add';\nimport ToDoList from './components/ToDoList';\n\nclass App extends Component {\n\n  counter = 3;\n  state = {\n    tasks: [\n    ]\n}\n\nhandleDeleteTask = (id) => {\nconsole.log('usunięte' + id)\nconst tasks = [...this.state.tasks];\nconst index = tasks.findIndex(task => task.id === id)\ntasks.splice(index,1);\n\nthis.setState({\n  tasks\n})\n\n}\nhandleChangeTaskStatus = (id) => {\n  console.log('edycja' + id);\n  const tasks = Array.from(this.state.tasks);\n  tasks.forEach(task => {\n    if(task.id === id) {\n      task.active = false;\n      task.finishDate = new Date().toLocaleDateString();\n    }\n  }) \n\n  this.setState({\n    tasks\n  });\n}\n\naddTask = (text, date) => {\n  const task = {\n    id: this.counter,\n    text: text,\n    date: date,\n    active: true,\n    finishDate: null,\n  }\n\n  this.counter++;\n\n  this.setState(prevState => ({\n    tasks: [...prevState.tasks, task]\n  }))\n  return true;\n}\n    render() {\n        return(\n            <div className='wrapper'>\n              <AnimationPage/>\n              <section className=\"task_container\">\n                <Add add={this.addTask}/>\n                <ToDoList tasks={this.state.tasks} delete = {this.handleDeleteTask} change={this.handleChangeTaskStatus}/>\n              </section>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}